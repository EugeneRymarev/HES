@if (Account == null)
{
    <LoadingText />
}
else
{
    if (EntityBeingEdited)
    {
        <EditedByAnother EntityName="account" CloseAction="ModalDialogService.CancelAsync" />
    }
    else
    {
        <EditForm Model="Account" OnValidSubmit="EditAccountAsync">
            <DataAnnotationsValidator />
            <ValidationErrorMessage @ref="ValidationErrorMessage" />
            <div class="form-group">
                <label class="control-label text-gray">Name</label>
                <InputText @bind-Value="Account.Name" class="form-control text-navyblue" />
                <ValidationMessage For="@(() => Account.Name)" class="text-danger" />
            </div>
            <div class="form-group">
                <label class="control-label text-gray">Login</label>
                <InputText @bind-Value="Account.Login" class="form-control text-navyblue" />
                <ValidationMessage For="@(() => Account.Login)" class="text-danger" />
            </div>
            @if (Account.Kind == AccountKind.WebApp)
            {
                <div class="form-group">
                    <label class="control-label text-gray">Urls</label>
                    <InputText @bind-Value="Account.Urls" class="form-control text-navyblue" />
                    <ValidationMessage For="@(() => Account.Urls)" class="text-danger" />
                </div>
                <div class="form-group">
                    <label class="control-label text-gray">Apps</label>
                    <InputText @bind-Value="Account.Apps" class="form-control text-navyblue" />
                    <ValidationMessage For="@(() => Account.Apps)" class="text-danger" />
                </div>
            }
            <div class="text-right">
                <button type="button" class="btn btn-secondary" @onclick="@(async () => await ModalDialogService.CancelAsync())">Cancel</button>
                <ButtonSpinner @ref="ButtonSpinner" Submit="true" Text="Save" Class="btn btn-primary" />
            </div>
        </EditForm>
    }
}