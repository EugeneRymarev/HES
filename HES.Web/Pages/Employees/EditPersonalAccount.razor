@if (Account == null)
{
    <LoadingText />
}
else
{
    <EditForm Model="Account" OnValidSubmit="EditAccountAsync">
        <DataAnnotationsValidator />
        <ValidationErrorMessage @ref="ValidationErrorMessage" />
        <div class="form-group">
            <label class="control-label text-gray">Name</label>
            <InputText @bind-Value="Account.Name" class="form-control text-navyblue" />
            <ValidationMessage For="@(() => Account.Name)" class="text-danger" />
        </div>
        <div class="form-group">
            <label class="control-label text-gray">Login</label>
            <InputText @bind-Value="Account.Login" class="form-control text-navyblue" />
            <ValidationMessage For="@(() => Account.Login)" class="text-danger" />
        </div>
        @if (Account.Kind == AccountKind.WebApp)
        {
            <div class="form-group">
                <label class="control-label text-gray">Urls</label>
                <InputText @bind-Value="Account.Urls" class="form-control text-navyblue" />
                <ValidationMessage For="@(() => Account.Urls)" class="text-danger" />
            </div>
            <div class="form-group">
                <label class="control-label text-gray">Apps</label>
                <InputText @bind-Value="Account.Apps" class="form-control text-navyblue" />
                <ValidationMessage For="@(() => Account.Apps)" class="text-danger" />
            </div>
        }
        <div class="text-right">
            <button type="button" class="btn btn-secondary" @onclick="@(async () => await ModalDialogService.CancelAsync())">Cancel</button>
            <button type="submit" class="btn btn-primary">
                <span class="spinner-border spinner-border-sm @(_isBusy == true ? null : "d-none")" role="status" aria-hidden="true"></span>
                <span>Save</span>
            </button>
        </div>
    </EditForm>
}