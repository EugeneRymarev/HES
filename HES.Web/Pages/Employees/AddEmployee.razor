@if (!_initialized)
{
    <LoadingText />
}
else
{
    if (LdapSettings == null)
    {
        <h5>To import users from the active directory, add administrator credentials on the parameters page.</h5>
        <div class="text-right  mt-4">
            <button type="button" class="btn btn-secondary btn-min-w" @onclick="@(async () => await ModalDialogService.CloseAsync())">Close</button>
        </div>
    }
    else
    {
        <Alert Message="@WarningMessage" />
        <div class="has-search-right my-2">
            <div class="form-control-feedback">
                <img class="img-size" src="/svg/action/search.svg" />
            </div>
            <input type="text" class="form-control" placeholder="Search" @bind="_searchText" @bind:event="oninput" />
        </div>
        <div class="table-responsive mb-3">
            <table class="table table-fixed-header table-hover border rounded mb-0 disable-selection">
                <thead>
                    <tr class="cursor-pointer">
                        <th>
                            <div class="custom-control custom-checkbox">
                                <input type="checkbox" class="custom-control-input" id="checkAll" @onchange="@((e) => { Users.ForEach(x => x.Checked = (bool)e.Value); })" />
                                <label class="custom-control-label" for="checkAll"></label>
                            </div>
                        </th>
                        <th @onclick="@(() => SortTable(nameof(Employee.FullName)))">
                            <span class="w-100">
                                @nameof(Group.Name)
                            </span>
                            <img class="table-sort-arrow @GetSortIcon(nameof(Employee.FullName))" />
                        </th>
                    </tr>
                </thead>
                <tbody style="max-height:55vh;">
                    @foreach (var user in Users.Where(x => x.Employee.FullName.Contains(_searchText, StringComparison.OrdinalIgnoreCase) || x.Checked))
                    {
                        <tr @key="user.Employee.Id" @onclick="@(() => { user.Checked = !user.Checked; })">
                            <td>
                                <div class="custom-control custom-checkbox" @onclick:stopPropagation="true">
                                    <input type="checkbox" class="custom-control-input" id="@user.Employee.Id" @bind="user.Checked" />
                                    <label class="custom-control-label" for="@user.Employee.Id"></label>
                                </div>
                            </td>
                            <td>
                                @user.Employee.FullName
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="mb-2 mx-1 custom-control custom-checkbox">
            <input type="checkbox" class="custom-control-input" id="createGroup" @bind="_createGroups" />
            <label class="custom-control-label disable-selection" for="createGroup">Create groups for selected users</label>
        </div>
        <div class="text-right">
            <button type="button" class="btn btn-secondary btn-min-w" @onclick="@(async () => await ModalDialogService.CloseAsync())">Cancel</button>
            <button type="button" class="btn btn-primary btn-min-w" @onclick="@(async () => await AddAsync())">
                <span class="spinner-border spinner-border-sm @(_isBusy == true ? null : "d-none")" role="status" aria-hidden="true"></span>
                <span>Add</span>
            </button>
        </div>
    }
}