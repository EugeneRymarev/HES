@page "/Identity/Account/Manage"
@inherits OwningComponentBase
@attribute [Authorize(Roles = ApplicationRoles.AdminRole)]

<NavigationHeader Tab="NavigationHeader.ActiveTab.Profile" />

@if (Initialized)
{
    <div class="row">
        <div class="col-lg-4 col-xl-5 col-xxl-7 mx-auto">
            <div class="card mb-2">
                <div class="card-body">
                    <h4 class="text-navyblue">Profile</h4>
                    <EditForm Model="ProfileInfo" OnValidSubmit="SaveProfileAsync">
                        <DataAnnotationsValidator />
                        <div class="form-group">
                            <label class="text-gray">Email</label>
                            <input @bind="ProfileInfo.Email" class="form-control" />
                            <ValidationMessage For="@(() => ProfileInfo.Email)" class="text-danger" />
                            @if (!ApplicationUser.EmailConfirmed)
                            {
                                <button type="button" @onclick="SendVerificationEmailAsync" class="btn btn-link">Send verification email</button>
                            }
                        </div>
                        <div class="form-group">
                            <label class="text-gray">Phone Number</label>
                            <input @bind="ProfileInfo.PhoneNumber" class="form-control" />
                            <ValidationMessage For="@(() => ProfileInfo.PhoneNumber)" class="text-danger" />
                        </div>
                        <div>
                            <button type="submit" class="btn btn-primary">Save profile</button>
                        </div>
                    </EditForm>
                </div>
            </div>
            <div class="card mb-2">
                <div class="card-body">
                    <h4 class="text-navyblue">Change Password</h4>
                    <EditForm Model="ProfilePassword" OnValidSubmit="ChangePasswordAsync">
                        <DataAnnotationsValidator />
                        <div class="form-group">
                            <label class="text-gray">Current password</label>
                            <input type="password" @bind="ProfilePassword.OldPassword" class="form-control" />
                            <ValidationMessage For="@(() => ProfilePassword.OldPassword)" class="text-danger" />
                        </div>
                        <div class="form-group">
                            <label class="text-gray">New password</label>
                            <input type="password" @bind="ProfilePassword.NewPassword" class="form-control" />
                            <ValidationMessage For="@(() => ProfilePassword.NewPassword)" class="text-danger" />
                        </div>
                        <div class="form-group">
                            <label class="text-gray">Confirm new password</label>
                            <input type="password" @bind="ProfilePassword.ConfirmPassword" class="form-control" />
                            <ValidationMessage For="@(() => ProfilePassword.ConfirmPassword)" class="text-danger" />
                        </div>
                        <div>
                            <button type="submit" class="btn btn-primary">Save password</button>
                        </div>
                    </EditForm>
                </div>
            </div>
            <div class="card mb-2">
                <div class="card-body">
                    <h4 class="text-navyblue">Security Keys</h4>
                    @foreach (var credential in StoredCredentials)
                    {
                        <div class="border rounded p-3 d-flex justify-content-between align-items-center mb-3">
                            <div>
                                <span class="d-block fw-bold">@credential.SecurityKeyName</span>
                                <small class="text-muted">Registration Date: @credential.RegDate.ToLocalTime().ToShortDateString()</small>
                            </div>
                            <div>
                                <button type="button" class="btn btn-light border mx-1" @onclick="@(async () =>  await EditSecurityKeyAsync(credential.Id))">Edit</button>
                                @if (StoredCredentials.Count > 1)
                                {
                                    <button type="button" class="btn btn-light border mx-1" @onclick="@(async () =>  await RemoveSecurityKeyAsync(credential.Id))">Delete</button>
                                }
                            </div>
                        </div>
                    }
                    <div>
                        <button class="btn btn-primary" @onclick="AddSecurityKeyAsync">Add security key</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

}
else if (LoadFailed)
{
    <LoadingFailed ErrorMessage="@ErrorMessage" />
}
else
{
    <LoadingTab />
}